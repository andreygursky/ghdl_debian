Add support for GCC 4.8 in GHDL.
Patch by Brian Drummond, adapted for Debian package by Joris van Rantwijk.
Source: https://gna.org/bugs/index.php?21305

2) ortho/gcc/lang.opt   line 22
Resolve clash between GHDL -P option (library path) and gcc -P option

3) ortho/gcc/Makefile.inc
Add vec.o to AGCC_OBJS to support new Gimple vectors
Change build flags for ortho_lang.c to use C++ compiler and supply correct include paths

4) ortho/gcc/ortho_gcc.ads line 415
Add parameter to Start_Choice procedure to support improved type checking in gcc4.8
NOTE: As this modified procedure is called from translate.adb, any implementations 
of it in other backends (MCODE?)) will need to implement the new signature 
(though they may simply ignore the added parameter)
line 657 : import C_Debug_Tree to allow Gimple tree diagnostics within Ada code.

5) ortho/gcc/ortho_gcc-main.adb, ortho_ident.adb
Modify C names of imported functions, to call new C wrappers over (now C++) external functions.
As the Ada names are unchanged, this change has no impact on other backends.

6) ortho/gcc/ortho_lang.c
Too many changes to describe individually : adapt ghdl to gcc4.8.2 backend.
Some highlights:
	rename variable "class" to "decl_class" as C++ has other uses of "class"
TODO: tidy up and remove experimental and commented-out code.
TODO: lines 637...
-
+  else 
+    // Handle larger requests by returning a NULL tree and letting 
+    // the back end default to another approach.
+    t = NULL_TREE;
+ 
This patch should be made conditional on 64 bit builds, or an alternative found that
works on both.

8) translate/gcc/Make-lang.in	line 69
Remove 50 accidentally duplicated Make lines
line 129/80
Add libstdc++ to linker args to resolve new C++ dependencies
line 171/122
Add install-plugin target.

10) BUGFIX: translate/translation.adb lines 7277, 7309
Fix for Support : 3028 - Number exceeds 32 bit range.
BUGFIX : line 13851 - fix typo in error message
	line 15314	Pass extra argument to Start_Choice (see item 4)
(*2)	line 19338 	Pass extra argument to Start_Choice (see item 4)
	line 19360	Pass extra argument to Start_Choice (see item 4)
	line 19519	Pass extra argument to Start_Choice (see item 4)

Index: ghdl-0.30~svn20130213/ghdl/ortho/gcc/Makefile.inc
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/ortho/gcc/Makefile.inc	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/ortho/gcc/Makefile.inc	2013-12-10 22:12:59.810533000 +0100
@@ -32,6 +32,7 @@
 AGCC_DEPS := $(AGCC_LOCAL_OBJS)
 AGCC_OBJS := $(AGCC_LOCAL_OBJS) \
 	$(AGCC_GCCOBJ_DIR)gcc/toplev.o \
+	$(AGCC_GCCOBJ_DIR)gcc/vec.o \
 	$(AGCC_GCCOBJ_DIR)gcc/attribs.o \
 	$(AGCC_GCCOBJ_DIR)gcc/libbackend.a \
 	$(AGCC_GCCOBJ_DIR)libcpp/libcpp.a \
@@ -40,7 +41,7 @@
 ortho-lang.o: $(agcc_srcdir)/ortho-lang.c \
  $(AGCC_GCCOBJ_DIR)gcc/gtype-vhdl.h \
  $(AGCC_GCCOBJ_DIR)gcc/gt-vhdl-ortho-lang.h
-	$(CC) -c -o $@ $< $(AGCC_CFLAGS)
+	$(COMPILER) -c -o $@ $< $(AGCC_CFLAGS) $(INCLUDES)
 
 agcc-clean: force
 	$(RM) -f $(agcc_objdir)/*.o
Index: ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho-lang.c
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/ortho/gcc/ortho-lang.c	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho-lang.c	2013-12-10 22:15:33.042533000 +0100
@@ -64,6 +64,7 @@
 /*  Chain of statements currently generated.  */
 static GTY(()) tree cur_stmts = NULL_TREE;
 
+
 static void
 push_binding (void)
 {
@@ -187,19 +188,26 @@
 }
 
 /* This is a stack of current statement_lists  */
-static GTY(()) VEC_tree_gc * stmt_list_stack;
+//static GTY(()) VEC_tree_gc * stmt_list_stack;
+
+// naive conversion to new vec API following the wiki at
+// http://gcc.gnu.org/wiki/cxx-conversion/cxx-vec
+// see also push_stmts, pop_stmts
+static vec <tree> stmt_list_stack = vec<tree>();
 
 static void
 push_stmts (tree stmts)
 {
-  VEC_safe_push (tree, gc, stmt_list_stack, cur_stmts);
+//  VEC_safe_push (tree, gc, stmt_list_stack, cur_stmts);
+  stmt_list_stack.safe_push(cur_stmts);
   cur_stmts = stmts;
 }
  
 static void
 pop_stmts (void)
 {
-  cur_stmts = VEC_pop (tree, stmt_list_stack);
+//  cur_stmts = VEC_pop (tree, stmt_list_stack);
+cur_stmts = stmt_list_stack.pop();
 }
 
 static void
@@ -214,7 +222,7 @@
 static GTY(()) tree top;
 
 static GTY(()) tree stack_alloc_function_ptr;
-extern void ortho_fe_init (void);
+extern "C" void ortho_fe_init (void);
 
 static bool
 global_bindings_p (void)
@@ -232,7 +240,7 @@
 builtin_function (const char *name,
 		  tree type,
 		  int function_code,
-		  enum built_in_class class,
+		  enum built_in_class decl_class,
 		  const char *library_name,
 		  tree attrs ATTRIBUTE_UNUSED);
 
@@ -341,7 +349,7 @@
   return false;
 }
 
-extern bool lang_handle_option (const char *opt, const char *arg);
+extern "C" bool lang_handle_option (const char *opt, const char *arg);
 
 static bool
 ortho_handle_option (size_t code, const char *arg, int value, int kind,
@@ -370,7 +378,7 @@
 	  
 	  len1 = strlen (opt);
 	  len2 = strlen (arg);
-	  nopt = alloca (len1 + len2 + 1);
+	  nopt = (char *) alloca (len1 + len2 + 1);
 	  memcpy (nopt, opt, len1);
 	  memcpy (nopt + len1, arg, len2);
 	  nopt[len1 + len2] = 0;
@@ -380,7 +388,7 @@
     }
 }
 
-extern int lang_parse_file (const char *filename);
+extern "C" int lang_parse_file (const char *filename);
 
 static void
 ortho_parse_file (void)
@@ -584,7 +592,7 @@
 builtin_function (const char *name,
 		  tree type,
 		  int function_code,
-		  enum built_in_class class,
+		  enum built_in_class decl_class,
 		  const char *library_name,
 		  tree attrs ATTRIBUTE_UNUSED)
 {
@@ -595,8 +603,8 @@
   if (library_name)
     SET_DECL_ASSEMBLER_NAME (decl, get_identifier (library_name));
   make_decl_rtl (decl);
-  DECL_BUILT_IN_CLASS (decl) = class;
-  DECL_FUNCTION_CODE (decl) = function_code;
+  DECL_BUILT_IN_CLASS (decl) = decl_class;
+  DECL_FUNCTION_CODE (decl) = (built_in_function) function_code;
   DECL_SOURCE_LOCATION (decl) = input_location;
   return decl;
 }
@@ -709,6 +717,10 @@
   char dummy;
 };
 
+
+extern "C" {
+
+
 struct GTY(()) chain_constr_type
 {
   tree first;
@@ -1202,6 +1214,8 @@
 start_enum_type (struct o_enum_list *list, int size)
 {
   list->res = make_node (ENUMERAL_TYPE);
+  // as of gcc4.8, TYPE_PRECISION of 0 is rigorously enforced!
+  TYPE_PRECISION(list->res) = size;
   chain_init (&list->chain);
   list->num = 0;
   list->size = size;
@@ -1210,7 +1224,7 @@
 void
 new_enum_literal (struct o_enum_list *list, tree ident, tree *res)
 {
-  *res = build_int_cstu (list->res, list->num);
+  *res = build_int_cstu (list->res, (HOST_WIDE_INT)(list->num));
   chain_append (&list->chain, tree_cons (ident, *res, NULL_TREE));
   list->num++;
 }
@@ -1233,7 +1247,8 @@
   /* Type of the next field to be added.  */
   tree field;
   /* Vector of elements.  */
-  VEC(constructor_elt,gc) *elts;
+  // VEC(constructor_elt,gc) *elts;
+  vec<constructor_elt,va_gc> *elts;
 };
 
 void
@@ -1241,8 +1256,8 @@
 {
   list->atype = atype;
   list->field = TYPE_FIELDS (atype);
-  list->elts = VEC_alloc (constructor_elt, gc, fields_length (atype));
-
+  //list->elts = VEC_alloc (constructor_elt, gc, fields_length (atype));
+  vec_alloc(list->elts, fields_length (atype));
 }
 
 void
@@ -1263,7 +1278,8 @@
 {
   tree atype;
   /* Vector of elements.  */
-  VEC(constructor_elt,gc) *elts;
+  //VEC(constructor_elt,gc) *elts;
+  vec<constructor_elt,va_gc> *elts;
 };
 
 void
@@ -1279,7 +1295,8 @@
   gcc_assert (nelts != NULL_TREE && host_integerp (nelts, 1));
 
   n = tree_low_cst (nelts, 1) + 1;
-  list->elts = VEC_alloc (constructor_elt, gc, n);
+  //list->elts = VEC_alloc (constructor_elt, gc, n);
+  vec_alloc(list->elts, n);
 }
 
 void
@@ -1847,20 +1864,22 @@
 struct GTY(()) o_assoc_list
 {
   tree subprg;
-  VEC(tree,gc) *vec;
+//  VEC(tree,gc) *vec;
+  vec<tree, va_gc> *vecptr;
 };
 
 void
 start_association (struct o_assoc_list *assocs, tree subprg)
 {
   assocs->subprg = subprg;
-  assocs->vec = NULL;
+  assocs->vecptr = NULL;
 }
 
 void
 new_association (struct o_assoc_list *assocs, tree val)
 {
-  VEC_safe_push (tree, gc, assocs->vec, val);
+//  VEC_safe_push (tree, gc, assocs->vec, val);
+  vec_safe_push(assocs->vecptr, val);
 }
 
 tree
@@ -1868,7 +1887,7 @@
 {
   return build_call_vec (TREE_TYPE (TREE_TYPE (assocs->subprg)),
                          build_function_ptr (assocs->subprg),
-                         assocs->vec);
+                         assocs->vecptr);
 }
 
 void
@@ -1878,7 +1897,7 @@
 
   res = build_call_vec (TREE_TYPE (TREE_TYPE (assocs->subprg)),
                         build_function_ptr (assocs->subprg),
-                        assocs->vec);
+                        assocs->vecptr);
   TREE_SIDE_EFFECTS (res) = 1;
   append_stmt (res);
 }
@@ -2048,23 +2067,32 @@
 {
   tree stmt;
   tree stmts;
+// following https://bitbucket.org/goshawk/gdc/issue/344/compilation-with-latest-trunk-fails
+// gimplify_switch_expr now checks type of index expr is (some discrete type) but at least not void
+  tree t_condtype = TREE_TYPE(value);
 
   block->end_label = build_label ();
   block->add_break = 0;
   stmts = alloc_stmt_list ();
-  stmt = build3 (SWITCH_EXPR, void_type_node, value, stmts, NULL_TREE);
+  //stmt = build3 (SWITCH_EXPR, void_type_node, value, stmts, NULL_TREE);
+  stmt = build3 (SWITCH_EXPR, t_condtype, value, stmts, NULL_TREE);
   append_stmt (stmt);
   push_stmts (stmts);
 }
 
 void
-start_choice (struct o_case_block *block)
+//start_choice (struct o_case_block *block)
+start_choice (struct o_case_block *block, tree value)
 {
   tree stmt;
+// following https://bitbucket.org/goshawk/gdc/issue/344/compilation-with-latest-trunk-fails
+// gimplify_switch_expr now checks type of index expr is (some discrete type) but at least not void
+  tree t_condtype = TREE_TYPE(value);
 
   if (block->add_break)
     {
-      stmt = build1 (GOTO_EXPR, void_type_node, block->end_label);
+//      stmt = build1 (GOTO_EXPR, void_type_node, block->end_label);
+      stmt = build1 (GOTO_EXPR, t_condtype, block->end_label);
       append_stmt (stmt);
 
       block->add_break = 0;
@@ -2075,9 +2103,15 @@
 new_expr_choice (struct o_case_block *block, tree expr)
 {
   tree stmt;
-  
+//  warning(OPT_Wall,"new_expr_choice : %ld ", TREE_INT_CST_LOW(expr));
+//  debug_tree(expr);
+
   stmt = build_case_label
     (expr, NULL_TREE, create_artificial_label (input_location));
+
+//  tree low = CASE_LOW (stmt);
+//  warning(OPT_Wall,"built : low %ld ", TREE_INT_CST_LOW(low));
+
   append_stmt (stmt);
 }
 
@@ -2135,6 +2169,27 @@
   *str = IDENTIFIER_POINTER (id);
 }
 
+// C linkage wrappers for two (now C++) functions so that
+// Ada code can call them without name mangling
+tree get_identifier_with_length_c (const char *c, size_t s)
+{
+  return get_identifier_with_length(c, s);
+}
+
+int toplev_main_c (int argc, char **argv)
+{
+  return toplev_main(argc, argv);
+}
+
+void
+debug_tree_c ( tree expr)
+{
+  warning(OPT_Wall,"Debug tree");
+  debug_tree(expr);
+}
+
+} // end extern "C"
+
 #include "debug.h"
 #include "gt-vhdl-ortho-lang.h"
 #include "gtype-vhdl.h"
Index: ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho_gcc-main.adb
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/ortho/gcc/ortho_gcc-main.adb	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho_gcc-main.adb	2013-12-10 22:12:59.810533000 +0100
@@ -12,7 +12,7 @@
 
    function Toplev_Main (Argc : Integer; Argv : System.Address)
                         return Integer;
-   pragma Import (C, Toplev_Main);
+   pragma Import (C, Toplev_Main, "toplev_main_c");
 
    Status : Exit_Status;
 begin
Index: ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho_gcc.ads
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/ortho/gcc/ortho_gcc.ads	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho_gcc.ads	2013-12-10 22:12:59.810533000 +0100
@@ -415,13 +415,15 @@
    --  Case statement.
    --  VALUE is the selector and must be a discrete type.
    procedure Start_Case_Stmt (Block : in out O_Case_Block; Value : O_Enode);
-   procedure Start_Choice (Block : in out O_Case_Block);
+   -- procedure Start_Choice (Block : in out O_Case_Block);
+   procedure Start_Choice (Block : in out O_Case_Block; Value : O_Enode);
    procedure New_Expr_Choice (Block : in out O_Case_Block; Expr : O_Cnode);
    procedure New_Range_Choice (Block : in out O_Case_Block;
                                Low, High : O_Cnode);
    procedure New_Default_Choice (Block : in out O_Case_Block);
    procedure Finish_Choice (Block : in out O_Case_Block);
    procedure Finish_Case_Stmt (Block : in out O_Case_Block);
+   procedure Debug_Tree_C(Expr : O_Cnode);
 
 private
    subtype Tree is System.Address;
@@ -657,4 +659,7 @@
    pragma Import (C, New_Default_Choice);
    pragma Import (C, Finish_Choice);
    pragma Import (C, Finish_Case_Stmt);
+
+   pragma Import (C, Debug_Tree_C);
+
 end Ortho_Gcc;
Index: ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho_ident.adb
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/ortho/gcc/ortho_ident.adb	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/ortho/gcc/ortho_ident.adb	2013-12-10 22:12:59.810533000 +0100
@@ -1,7 +1,7 @@
 package body Ortho_Ident is
    function Get_Identifier_With_Length (Str : Address; Size : Integer)
                                        return O_Ident;
-   pragma Import (C, Get_Identifier_With_Length);
+   pragma Import (C, Get_Identifier_With_Length, "get_identifier_with_length_c");
 
    function Compare_Identifier_String
      (Id : O_Ident; Str : Address; Size : Integer)
Index: ghdl-0.30~svn20130213/ghdl/translate/gcc/Make-lang.in
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/translate/gcc/Make-lang.in	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/translate/gcc/Make-lang.in	2013-12-10 22:12:59.810533000 +0100
@@ -69,55 +69,6 @@
 AGCC_GCCOBJ_DIR=../
 
 ####gcc Makefile.inc
-#  -*- Makefile -*- for the gcc implemantation of ortho.
-#  Copyright (C) 2005 Tristan Gingold
-#
-#  GHDL is free software; you can redistribute it and/or modify it under
-#  the terms of the GNU General Public License as published by the Free
-#  Software Foundation; either version 2, or (at your option) any later
-#  version.
-#
-#  GHDL is distributed in the hope that it will be useful, but WITHOUT ANY
-#  WARRANTY; without even the implied warranty of MERCHANTABILITY or
-#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
-#  for more details.
-#
-#  You should have received a copy of the GNU General Public License
-#  along with GCC; see the file COPYING.  If not, write to the Free
-#  Software Foundation, 59 Temple Place - Suite 330, Boston, MA
-#  02111-1307, USA.
-
-# Variable used:
-# AGCC_GCCSRC_DIR: the gcc source base directory (ie gcc-X.Y.Z-objs/)
-# AGCC_GCCOBJ_DIR: the gcc objects base directory
-# agcc_srcdir: the agcc source directory
-# agcc_objdir: the agcc object directory
-
-AGCC_INC_FLAGS=-I$(AGCC_GCCOBJ_DIR)/gcc -I$(AGCC_GCCSRC_DIR)/include \
- -I$(AGCC_GCCSRC_DIR)/gcc -I$(AGCC_GCCSRC_DIR)/gcc/config \
- -I$(AGCC_GCCSRC_DIR)/libcpp/include
-AGCC_CFLAGS=-g -Wall -DIN_GCC $(AGCC_INC_FLAGS)
-
-AGCC_LOCAL_OBJS=ortho-lang.o
-
-AGCC_DEPS := $(AGCC_LOCAL_OBJS)
-AGCC_OBJS := $(AGCC_LOCAL_OBJS) $(AGCC_GCCOBJ_DIR)gcc/attribs.o
-#	$(AGCC_GCCOBJ_DIR)gcc/toplev.o
-
-ortho-lang.o: $(agcc_srcdir)/ortho-lang.c \
- $(AGCC_GCCOBJ_DIR)gcc/gtype-vhdl.h \
- $(AGCC_GCCOBJ_DIR)gcc/gt-vhdl-ortho-lang.h
-	$(CC) -c -o $@ $< $(AGCC_CFLAGS)
-
-agcc-clean: force
-	$(RM) -f $(agcc_objdir)/*.o
-	$(RM) -f $(agcc_srcdir)/*~
-
-agcc-maintainer-clean: force
-	$(RM) -f $(AGCC_DEPS)
-
-
-.PHONY: agcc-clean agcc-maintainer-clean
 
 # The compiler proper.
 # It is compiled into the vhdl/ subdirectory to avoid file name clashes but
@@ -129,7 +80,7 @@
 	$(GNATMAKE) -o $@ -aI$(srcdir)/vhdl -aOvhdl ortho_gcc-main \
 	 -bargs -E -cargs $(CFLAGS) $(GHDL_ADAFLAGS) \
 	 -largs $(AGCC_OBJS) $(filter-out main.o,$(BACKEND)) \
-	 $(LIBS) $(BACKENDLIBS)
+	 $(LIBS) $(BACKENDLIBS) -lstdc++
 
 # The driver for ghdl.
 ghdl$(exeext): force
Index: ghdl-0.30~svn20130213/ghdl/translate/translation.adb
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/translate/translation.adb	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/translate/translation.adb	2013-12-10 22:13:06.000000000 +0100
@@ -13831,7 +13831,6 @@
 
             when Iir_Kind_Enumeration_Literal =>
                return Get_Ortho_Expr (Get_Enumeration_Decl (Expr));
-
             when Iir_Kind_Floating_Point_Literal =>
                return New_Float_Literal
                  (Res_Type, IEEE_Float_64 (Get_Fp_Value (Expr)));
@@ -13851,7 +13850,7 @@
                    * Iir_Fp64 (Get_Value (Get_Physical_Unit_Value
                                           (Get_Unit_Name (Expr))))));
             when others =>
-               Error_Kind ("tranlate_numeric_literal", Expr);
+               Error_Kind ("translate_numeric_literal", Expr);
          end case;
       exception
          when Constraint_Error =>
@@ -15314,7 +15313,8 @@
             Start_Case_Stmt (Case_Blk, New_Obj_Value (Var_Pos));
             El_Assoc := Null_Iir;
             while El /= Null_Iir loop
-               Start_Choice (Case_Blk);
+--               Start_Choice (Case_Blk);
+               Start_Choice (Case_Blk, New_Obj_Value (Var_Pos));
                Chap8.Translate_Case_Choice (El, Range_Type, Case_Blk);
                if Get_Associated (El) /= Null_Iir then
                   El_Assoc := Get_Associated (El);
@@ -19338,13 +19338,15 @@
             while Choice /= Null_Iir loop
                case Get_Kind (Choice) is
                   when Iir_Kind_Choice_By_Others =>
-                     Start_Choice (Case_Blk);
+                     -- Start_Choice (Case_Blk);
+                     Start_Choice (Case_Blk, New_Obj_Value (Var_Idx));
                      New_Expr_Choice (Case_Blk, Others_Lit);
                      Finish_Choice (Case_Blk);
                      Translate_Statements_Chain (Get_Associated (Choice));
                   when Iir_Kind_Choice_By_Expression =>
                      if not Get_Same_Alternative_Flag (Choice) then
-                        Start_Choice (Case_Blk);
+                        -- Start_Choice (Case_Blk);
+                        Start_Choice (Case_Blk, New_Obj_Value (Var_Idx));
                         New_Expr_Choice
                           (Case_Blk,
                            New_Unsigned_Literal
@@ -19360,7 +19362,8 @@
                Choice := Get_Chain (Choice);
             end loop;
 
-            Start_Choice (Case_Blk);
+            -- Start_Choice (Case_Blk);
+            Start_Choice (Case_Blk, New_Obj_Value (Var_Idx));
             New_Default_Choice (Case_Blk);
             Finish_Choice (Case_Blk);
             Chap6.Gen_Program_Error (Stmt, Chap6.Prg_Err_No_Choice);
@@ -19519,7 +19522,8 @@
          Start_Case_Stmt (Case_Blk, Chap7.Translate_Expression (Expr));
          Choice := Get_Case_Statement_Alternative_Chain (Stmt);
          while Choice /= Null_Iir loop
-            Start_Choice (Case_Blk);
+            -- Start_Choice (Case_Blk);
+            Start_Choice (Case_Blk, Chap7.Translate_Expression (Expr));
             Stmt_Chain := Get_Associated (Choice);
             loop
                Translate_Case_Choice (Choice, Expr_Type, Case_Blk);
Index: ghdl-0.30~svn20130213/ghdl/ortho/gcc/lang.opt
===================================================================
--- ghdl-0.30~svn20130213.orig/ghdl/ortho/gcc/lang.opt	2013-12-10 22:12:59.822533000 +0100
+++ ghdl-0.30~svn20130213/ghdl/ortho/gcc/lang.opt	2013-12-10 22:12:59.818533000 +0100
@@ -22,8 +22,8 @@
 Set the directory of the work library
 
 P
-vhdl Joined
--P<dir>	Add <dir> to the end of the vhdl library path
+vhdl JoinedOrMissing
+;-P<dir>	Add <dir> to the end of the vhdl library path
 
 -elab
 vhdl Separate
